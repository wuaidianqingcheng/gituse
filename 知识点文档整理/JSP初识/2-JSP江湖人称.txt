JSP隐式对象
JSP隐式对象是JSP容器为每一个页面提供的Java对象，开发者可以直接使用他们而不用显式声明。JSP隐式对象也称为预定义变量
江湖人称JSP九大武林高手--------隐式对象：
request			HttpServletRequest接口的实例
response		HttpServletResponse接口的实例
out			JspWriter类的实例，用于把结果输出至网页上
session			HttpSession类的实例
application		ServletContext类的实例，与应用上下文有关
config			ServletConfig类的实例
pageContext		PageContext类的实例，提供对JSP页面所有对象以及命名空间的访问
page			类似于this
Exception		Exception类的对象，代表发生错误的JSP页面中对应的异常对象

	request对象
	request队形是javax.http.HttpServletRequest类的实例。每当客户端请求一个JSP页面时，JSP引擎就会制造一个新的request对象来
代表这个请求。
request对象提供了一系列方法来获取HTTP头信息，cookies，HTTP方法等。

	response对象
	response对象是javax.servlet.http.HttpServletResponse类的实例。当服务器创建request对象时会同时创建用于响应这个客户端的、
response对象。response对象也定义了处理HTTP请求头模块的接口。通过这个对象，开发者们可以添加新的cookies，时间戳，HTTP状态码等；
	out对象
	out对象是javax.servlet.jsp.JspWriter类的实例，用来在response对象中写入内容。
	最初的JspWriter类对象根据页面是否有缓存来进行不同的实例化操作。可以在page指令中使用buffered='false'属性来轻松关闭缓存。
JspWriter类包含了大部分java.io.PrintWriter类中的方法。不过JspWriter新增了一些专为处理缓存而设计的方法。还有就是JspWriter会抛出
IOExceptions异常，而PrintWriter不会。
	下面是输出boolean，char，double，int，string，object等类型数据的方法：
	out.print(dataType dt)			输出type类型的值
	out.println(dataType dt)		输出type类型的值然后换行
	out.flush()				刷新输出流

	session对象	
	session对象是javax.servlet.http.HttpSession类的实例。和Java Servlets中session对象有一样的行为。
	session对象用来跟踪在各个客户端请求间的会话。

	application对象
	application对象直接包装了servlet的ServletContext类的对象，是javax.servlet.ServletContext类的实例。
	这个对象在JSP页面的整个生命周期中都代表着这个JSP页面。这个对象在JSP页面初始化时被创建，
随着jspDestroy()方法的调用而被移除。
	听过向application中添加属性，而所有组成您web应用的JSP文件都能访问到这些属性。

	config对象
	config对象是javax.servlet.ServletConfig类的实例，直接包装了servvlet的ServletConfig类对象。
	这个对象允许开发者访问Servlet或者JSP引擎的初始化参数，比如文件路径等。
	config.getServletName() 此方法不常用

	pageContext
	pageContext对象是javaxservlet.jsp.pageContext类的实例，用来代表整个JSP页面。
	这个对象主要是用来访问页面信息，同时过滤掉大部分实现细节
	这个对象存储了request对象和response对象的引用。application对象，config对象，session对象，out对象
可以通过访问这个对象的属性来导出。
	pageContext对象也包含了传给JSP页面的指令信息，包括缓存信息，ErrorPage URL，页面scope等。
	pageContext类定义了一些字段，包括PAGE_SCOPE,REQUEST_SCOPE,SESSION_SCOPE,APPLICATION_SCOPE..他也
提供了40余种方法，有一种继承自javax.servlet.jsp.JspContext类。
	其中一个重要方法就是removeAttribute(),他可以接受一个或两个参数。比如，pageContex.removeAttribute("attrName")
移除四个scope中相关属性，但是下面这种方法只移除特定scope中相关属性：
	pageContext.removeAttribute("attrName",PAGE_SCOPE);

	page对象
	page对象就是页面对象的引用。它可以看做是整个JSP页面的代表。
	page对象就是this对象的同义词

	exception对象
	exception对象包装了从先前页面中抛出的异常信息，他通常被用来产生对出错条件的适当响应

	JSP客户端请求
	当浏览器请求一个页面时，它会向网络服务器发送一系列不能被直接读取的信息，因为这些信息是作为HTTP信息头
的一部分来传送的。您客户已查阅HTTP协议来获取更多的信息
	Accept			指定浏览器或其他客户端可以处理的MIME类型。他的值通常为image/png或image/jpeg
	Accept-Charset		指定浏览器要使用的字符集。如ISO-8859-1
	Accept-Encoding		指定编码类型。它的值通常为gzip或compress
	Accept-Language		指定客户端首选语言
	Authorization		在访问受密码保护的网页时识别不同的用户
	Content-Length		仅适用于POST请求，表示Post数据的自己字节数
	Cookie			返回先前发送给浏览器的cookie至服务器
	Host			指出原始URL中的主机名和端口号
	If-Modified-Since	表示只有当网页在指定的日期被修改后客户端才更需要这个网页。服务器发送304给客户端，则表示么有更新的资源
	If-Unmodified-Since	表示只有文档在指定日期后仍未被修改过，操作才会成功
	Referer			标志着所引用的URL，比如，如果你在页面1，如果点了链接跳转到页面2，那么页面1的URL就会包含在浏览器请求页面2的请求头里
	UserAgent		用来区分不同浏览1或者客户端发送的请求，并对不同类型的浏览器返回不同的内容
	
	HttpServletRequest类
	request对象是javax.servlet.http.HttpServletRequest类的实例。每当客户端请求一个页面时，jsp引擎就会产生一个新的对象
来代表这个请求
	request对象提供了一系列方法来获取HTTP信息头，包括表单数据，cookies，HTTP方法等
	介绍一些在JSP编程中常用的获取HTTP信息头的方法。
	1	Cookie[] getCookies()
	返回客户端所有的Cookie的数组
	2	Enumeration getAttributeNames()
	返回request对象的所有属性名称的集合
	3	Enumeration getHeaderNames()
	返回所有HTTP头的名称集合
	4	Enumeration getParameterNames()
	返回请求中所有参数的集合
	5	HttpSession getSession()
	返回request对应的session对象，如果没有，则创建一个
	6	HttpSession getSession(boolean create)
	返回request对应的session对象，如果没有并且参数create为true，则返回一个新的session对象
	7	Locale getLocale()
	返回当前页的Locale对象，可以在response中设置
	8	Object getAttribute(String name)
	返回名称为name的属性值，如果不存在则返回null。
	9	ServletInputStream getInputStream()
	返回请求的输入流
	10	String getAuthType()
	返回认证方案的名称，用来保护servlet，比如 "BASIC" 或者 "SSL" 或 null 如果 JSP没设置保护措施
	11	String getCharacterEncoding()
	返回request的字符编码集名称
	12	String getContentType()
	返回request主体的MIME类型，若未知则返回null
	13	String getContextPath()
	返回request URI中指明的上下文路径
	14	String getHeader(String name)
	返回name指定的信息头
	15	String getMethod()
	返回此request中的HTTP方法，比如 GET,，POST，或PUT
	16	String getParameter(String name)
	返回此request中name指定的参数，若不存在则返回null
	17	String getPathInfo()
	返回任何额外的与此request URL相关的路径
	18	String getProtocol()
	返回此request所使用的协议名和版本
	19	String getQueryString()
	返回此 request URL包含的查询字符串
	20	String getRemoteAddr()
	返回客户端的IP地址
	21	String getRemoteHost()
	返回客户端的完整名称
	22	String getRemoteUser()
	返回客户端通过登录认证的用户，若用户未认证则返回null
	23	String getRequestURI()
	返回request的URI
	24	String getRequestedSessionId()
	返回request指定的session ID
	25	String getServletPath()
	返回所请求的servlet路径
	26	String[] getParameterValues(String name)
	返回指定名称的参数的所有值，若不存在则返回null
	27	boolean isSecure()
	返回request是否使用了加密通道，比如HTTPS
	28	int getContentLength()
	返回request主体所包含的字节数，若未知的返回-1
	29	int getIntHeader(String name)
	返回指定名称的request信息头的值
	30	int getServerPort()
	返回服务器端口号
	
	JSP 服务器响应
	response响应对象主要是将JSP容器处理后的结果返回到客户端。可以通过response变量设置HTTP的状态和向客户端发送数据
如Cookie，http文件头信息
	响应头信息如下：
	Allow				指定服务器支持的request方法 post get
	Cache-Control			指定响应文档能够被安全缓存的情况 public private no-cache
	Connection			命令浏览器是否使用持久的HTTP连接 close 不持久 keep-alive使用持久化连接
	Content-Dispostion		让浏览器要求用户将响应以给定名称存储正在磁盘中
	Content-Encoding		指定传输时页面的编码规则
	Content-Language		表述文档所使用的语言
	Content-Length			表明响应的字节数
	Content-Type			表明文档使用的MIME类型
	Expires				指明啥时候过期并从缓存中移除
	Last-Modified			指明文档最后修改时间。客户端可以缓存文档并且在后续的请求中提供一个If-Modified-Since请求头1
	Location			在300秒内，包含所有的有一个状态码的响应地址，浏览器会自动重连然后检索文档
	Refresh				指明浏览器每隔多久请求更新一次页面
	Retry-After			与503一起使用来该诉用户多久后请求将得到响应
	Set-Cookie			指明当前页面对应的cookie
	
	HttpServletResponse类
	reponse对象是javax.servlet.http.HttpServletResponse类的一个实例。就像服务器会创建request对象一样，它也会创建一个1客户端响应
	reponse对象定义了处理创建HTTP信息头的就接口。。通过使用这个对象，开发者们可以添加新的Cookie或事件戳，还有HTTP状态码
	下面是设置请求头的方法
	1	String encodeRedirectURL(String url)
	对sendRedirect()方法使用的URL进行编码
	2	String encodeURL(String url)
	将URL编码，回传包含Session ID的URL
	3	boolean containsHeader(String name)
	返回指定的响应头是否存在
	4	boolean isCommitted()
	返回响应是否已经提交到客户端
	5	void addCookie(Cookie cookie)
	添加指定的cookie至响应中
	6	void addDateHeader(String name, long date)
	添加指定名称的响应头和日期值
	7	void addHeader(String name, String value)
	添加指定名称的响应头和值
	8	void addIntHeader(String name, int value)
	添加指定名称的响应头和int值
	9	void flushBuffer()
	将任何缓存中的内容写入客户端
	10	void reset()
	清除任何缓存中的任何数据，包括状态码和各种响应头
	11	void resetBuffer()
	清除基本的缓存数据，不包括响应头和状态码
	12	void sendError(int sc)
	使用指定的状态码向客户端发送一个出错响应，然后清除缓存
	13	void sendError(int sc, String msg)
	使用指定的状态码和消息向客户端发送一个出错响应
	14	void sendRedirect(String location)
	使用指定的URL向客户端发送一个临时的间接响应
	15	void setBufferSize(int size)
	设置响应体的缓存区大小
	16	void setCharacterEncoding(String charset)
	指定响应的编码集（MIME字符集），例如UTF-8
	17	void setContentLength(int len)
	指定HTTP servlets中响应的内容的长度，此方法用来设置 HTTP Content-Length 信息头
	18	void setContentType(String type)
	设置响应的内容的类型，如果响应还未被提交的话
	19	void setDateHeader(String name, long date)
	使用指定名称和值设置响应头的名称和内容
	20	void setHeader(String name, String value)
	使用指定名称和值设置响应头的名称和内容
	21	void setIntHeader(String name, int value)
	指定 int 类型的值到 name 标头
	22	void setLocale(Locale loc)
	设置响应的语言环境，如果响应尚未被提交的话
	23	void setStatus(int sc)
	设置响应的状态码

	JSP HTTP状态码
	HTTP请求和HTTP响应的格式很接近，都有着如下结构
	1以状态行+CRLF开始
	2零行或多行头模块+CRLF
	3一个空行，比如CRLF	
	4可选的消息体比如文件，查询数据，查询输出
	
	状态码简介
	100	Continue		只有一部分请求被服务器接收，但只要没被服务器拒绝，客户端就会延续这个请求
	101	Switching Protocols	服务器交换机协议
	200	OK			请求被确认
	201	Created			请求时完整的，新的资源被创建
	202	Accepted		请求被接受，但未处理完

	300	Multiple Choices	一个超链接表，用户可以选择一个超链接并访问，最大支持5个超链接
	301	Moved Permanently	被请求的页面已经移动到了新的URL下
	302	Found	被请求的页面暂时性地移动到了新的URL下
	303	See Other	被请求的页面可以在一个不同的URL下找到
	304	Not Modified	 
	305	Use Proxy	 
	306	Unused	已经不再使用此状态码，但状态码被保留
	307	Temporary Redirect	被请求的页面暂时性地移动到了新的URL下
	400	Bad Request	服务器无法识别请求
	401	Unauthorized	被请求的页面需要用户名和密码
	402	Payment Required	目前还不能使用此状态码
	403	Forbidden	禁止访问所请求的页面
	404	Not Found	服务器无法找到所请求的页面
	405	Method Not Allowed	请求中所指定的方法不被允许
	406	Not Acceptable	服务器只能创建一个客户端无法接受的响应
	407	Proxy Authentication Required	在请求被服务前必须认证一个代理服务器
	408	Request Timeout	请求时间超过了服务器所能等待的时间，连接被断开
	409	Conflict	请求有矛盾的地方
	410	Gone	被请求的页面不再可用
	411	Length Required	"Content-Length"没有被定义，服务器拒绝接受请求
	412	Precondition Failed	请求的前提条件被服务器评估为false
	413	Request Entity Too Large	因为请求的实体太大，服务器拒绝接受请求
	414	Request-url Too Long	服务器拒绝接受请求，因为URL太长。多出现在把"POST"请求转换为"GET"请求时所附带的大量查询信息
	415	Unsupported Media Type	服务器拒绝接受请求，因为媒体类型不被支持
	417	Expectation Failed	 
	500	Internal Server Error	请求不完整，服务器遇见了出乎意料的状况
	501	Not Implemented	请求不完整，服务器不提供所需要的功能
	502	Bad Gateway	请求不完整，服务器从上游服务器接受了一个无效的响应
	503	Service Unavailable	请求不完整，服务器暂时重启或关闭
	504	Gateway Timeout	网关超时
	505	HTTP Version Not Supported	服务器不支持所指定的HTTP版本
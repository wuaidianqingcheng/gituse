上节简单说了表单绑定  
这节简单聊聊组件基础  

// 定义一个名为 button-counter 的新组件
Vue.component('button-counter', {
  data: function () {
    return {
      count: 0
    }
  },
  template: '<button v-on:click="count++">You clicked me {{ count }} times.</button>'
})

<div id="components-demo">
  <button-counter></button-counter>
</div>
new Vue({ el: '#components-demo' })

组件就是可复用的vue实例，且带有一个名字，我们可以在一个通过new vue创建的vue的根实例里面把这个组件当做自定义元素使用
因为组件是可复用vue实例，所有vue实例所具有的的选项，组件也同样是有的  唯一不同的是el选项是vue根实例所特有的  

因为组件是可以复用的  我们可以在vue根实例下就像使用标签一样使用各类组件
需要注意的是虽说有时我们引用的vue组件是相同的，但是每一个组件都会各自独立维护自身的状态。因为你每使用一次组件，就会有一个它的根实例被创建

data选项   
在vue根实例中data是作为一个选项对象来进行定义的
形如
data:{
index:'1'
}
但是在组件中 data选项是且必须是一个函数
形如
data:{
return {
index:"1"
}
}
假使data不是一个函数的话  那么如果我们引用相同的几个组件 那么我们操作某一个组件  那么所有的组件都会响应
显然这并不是我们想要的效果
所以组件中的data选项必须是一个函数

组件的组织
通常一个应用会以一颗嵌套的组件树的形式来组织，例如，你可能会有页头，侧边栏，内容区等组件，每一个组件又包含了其他像导航链接，博文之类的组件，为了保证组件能在模板中使用，这些组件必须先注册以便vue能够识别。
组件的注册又分为全局注册和局部注册，我们的组件都是通过Vue.componnet全局注册的
当然。全局注册的组件可以用在其被注册之后的任何新创建的vue根实例中。也包括其组件树中的所有子组件的模板中。

接下来简单聊一下组件的注册
我们在注册一个组件的时候，我们始终需要给它起一个名字，比如在全局注册的时候我们已经看到
至于组件的命名一般有两种 kebab-case 短横线分隔命名，另一种就是PascalCase驼峰命名法  
但是直接在DOM中使用时只有kebab-case是有效的  所以推荐使用kebab-case
注册注册的简单书写
Vue.component("v-header",{})
new Vue({
el:"#app"
})
<div id="app">
<v-header></v-header>
</div>
我们现在只是简单的知道或写过全局注册的demo，但是在实际开发时，我们一般是很少使用全局注册组件的
举个简单的例子  就像js中的全局变量和局部变量  前端优化性能和代码规范很重要的一条就是尽可能少的定义全局变量，它是很耗费性能和内存的
再有如果我们使用webpack来构建项目，一旦全局注册组件过多，在程序运行时，即便我们在某一个应用中并没有使用，它依然会运行的
所以我们大多使用局部注册组件的方式来构建应用
我们一般通过一个普通的js对象来定义组件
var ComponentA = { /* ... */ }
var ComponentB = { /* ... */ }
var ComponentC = { /* ... */ }
然后在 components 选项中定义你想要使用的组件：

new Vue({
  el: '#app'
  components: {
    'component-a': ComponentA,
    'component-b': ComponentB
  }
})
对于components对象中的每一个属性来说，属性名就是组件名，属性值对应的组件的选项对象
注意局部注册的组件在其子组件中不不可用的   如果你希望可用 那就么
var ComponentA = { /* ... */ }

var ComponentB = {
  components: {
    'component-a': ComponentA
  },
  // ...
}
此时 组件A在组件B中可用
